<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
          "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
          "http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd">

<module name="Checker">
    <!--
        If you set the basedir property below, then all reported file
        names will be relative to the specified directory. See
        http://checkstyle.sourceforge.net/5.x/config.html#Checker
        <property name="basedir" value="${basedir}"/>
    -->
    <property name="charset" value="UTF-8"/>

    <property name="severity" value="warning"/>

    <property name="fileExtensions" value="java, properties, xml"/>

    <!-- Checks that a package-info.java file exists for each package.     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocPackage -->
    <!-- <module name="JavadocPackage"/> -->

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <module name="NewlineAtEndOfFile"/>

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <module name="Translation"/>

    <!-- Checks for Size Violations.                    -->
    <!-- See http://checkstyle.sf.net/config_sizes.html -->
    <module name="FileLength"/>


    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <!-- <module name="EmptyLineSeparator"> -->
    <!--   <property name="allowNoEmptyLineBetweenFields" value="true"/> -->
    <!-- </module> -->

    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <!-- Miscellaneous other checks.                   -->
    <!-- See http://checkstyle.sf.net/config_misc.html -->
    <module name="RegexpSingleline">
       <property name="format" value="\s+$"/>
       <property name="minimum" value="0"/>
       <property name="maximum" value="0"/>
       <property name="message" value="Line has trailing spaces."/>
    </module>

    <!-- Checks for Headers                                -->
    <!-- See http://checkstyle.sf.net/config_header.html   -->
    <!-- <module name="Header"> -->
    <!--   <property name="headerFile" value="${checkstyle.header.file}"/> -->
    <!--   <property name="fileExtensions" value="java"/> -->
    <!-- </module> -->

    <module name="TreeWalker">
      <module name="MethodParamPad"/>
      <module name="NoLineWrap"/>

      <module name="NoWhitespaceBefore">
        <property name="tokens" value="COMMA, SEMI, POST_INC, POST_DEC, DOT, ELLIPSIS, METHOD_REF"/>
        <property name="allowLineBreaks" value="true"/>
      </module>

      <module name="OperatorWrap">
        <property name="option" value="eol"/>
        <property name="tokens" value="BAND, BOR, BSR, BXOR, COLON, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF "/>
      </module>

      <!-- <module name="PadParen"> -->
      <!--   <property name="option" value="space"/> -->
      <!-- </module> -->

      <module name="SeparatorWrap">
        <property name="id" value="SeparatorWrapDot"/>
        <property name="tokens" value="DOT"/>
        <property name="option" value="nl"/>
      </module>
      <module name="SeparatorWrap">
        <property name="id" value="SeparatorWrapComma"/>
        <property name="tokens" value="COMMA"/>
        <property name="option" value="EOL"/>
      </module>
      <module name="SeparatorWrap">
        <!-- ELLIPSIS is EOL until https://github.com/google/styleguide/issues/258 -->
        <property name="id" value="SeparatorWrapEllipsis"/>
        <property name="tokens" value="ELLIPSIS"/>
        <property name="option" value="EOL"/>
      </module>
      <module name="SeparatorWrap">
        <!-- ARRAY_DECLARATOR is EOL until https://github.com/google/styleguide/issues/259 -->
        <property name="id" value="SeparatorWrapArrayDeclarator"/>
        <property name="tokens" value="ARRAY_DECLARATOR"/>
        <property name="option" value="EOL"/>
      </module>
      <module name="SeparatorWrap">
        <property name="id" value="SeparatorWrapMethodRef"/>
        <property name="tokens" value="METHOD_REF"/>
        <property name="option" value="nl"/>
      </module>

        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
            <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
        </module>

        <module name="JavadocParagraph"/>

        <!-- <module name="JavadocMethod"> -->
        <!--     <property name="scope" value="public"/> -->
        <!--     <property name="allowMissingParamTags" value="true"/> -->
        <!--     <property name="allowMissingThrowsTags" value="true"/> -->
        <!--     <property name="allowMissingReturnTag" value="true"/> -->
        <!--     <property name="minLineCount" value="2"/> -->
        <!--     <property name="allowedAnnotations" value="Override, Test"/> -->
        <!--     <property name="allowThrowsTagsForSubclasses" value="true"/> -->
        <!-- </module> -->

        <!-- <module name="JavadocType"/> -->
        <!-- <module name="JavadocVariable"/> -->
        <module name="JavadocStyle"/>
        <module name="JavadocTagContinuationIndentation"/>
        <module name="NonEmptyAtclauseDescription"/>
        <module name="SingleLineJavadoc">
          <property name="ignoreInlineTags" value="false"/>
        </module>

        <module name="SummaryJavadoc">
          <property name="forbiddenSummaryFragments" value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>
        </module>

        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="AbbreviationAsWordInName"/>
        <module name="CatchParameterName">
          <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
          <message key="name.invalidPattern"
                   value="Catch parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ClassTypeParameterName">
          <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
          <message key="name.invalidPattern"
                   value="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <!-- <module name="ConstantName"/> -->
        <module name="InterfaceTypeParameterName">
          <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
          <message key="name.invalidPattern"
                   value="Interface type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName">
          <property name="tokens" value="VARIABLE_DEF"/>
          <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
          <message key="name.invalidPattern"
                   value="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <!-- <module name="MemberName"> -->
        <!--   <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/> -->
        <!--   <message key="name.invalidPattern" -->
        <!--            value="Member name ''{0}'' must match pattern ''{1}''."/> -->
        <!-- </module> -->

        <module name="MethodName">
          <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
          <message key="name.invalidPattern"
                   value="Method name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <module name="MethodTypeParameterName">
          <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
          <message key="name.invalidPattern"
                   value="Method type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <module name="PackageName">
          <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
          <message key="name.invalidPattern"
                   value="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <module name="ParameterName">
          <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
          <message key="name.invalidPattern"
                   value="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- <module name="StaticVariableName"/> -->
        <!-- <module name="TypeName"> -->
        <!--   <message key="name.invalidPattern" -->
        <!--            value="Type name ''{0}'' must match pattern ''{1}''."/> -->
        <!-- </module> -->

        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="AvoidStarImport"/>
        <!-- <module name="CustomImportOrder"> -->
        <!--   <property name="sortImportsInGroupAlphabetically" value="true"/> -->
        <!--   <property name="separateLineBetweenGroups" value="true"/> -->
        <!--   <property name="customImportOrderRules" value="STATIC###THIRD_PARTY_PACKAGE"/> -->
        <!-- </module> -->
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
        <module name="RedundantImport"/>
        <module name="UnusedImports">
            <property name="processJavadoc" value="false"/>
        </module>

        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <module name="LineLength">
          <property name="max" value="120"/>
          <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
        </module>
        <module name="MethodLength"/>
        <module name="OuterTypeFilename"/>
        <module name="ParameterNumber"/>

        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForIteratorPad"/>
        <module name="GenericWhitespace"/>
        <module name="GenericWhitespace">
          <message key="ws.followed"
                   value="GenericWhitespace ''{0}'' is followed by whitespace."/>
          <message key="ws.preceded"
                   value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
          <message key="ws.illegalFollow"
                   value="GenericWhitespace ''{0}'' should followed by whitespace."/>
          <message key="ws.notPreceded"
                   value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceAfter"/>
        <module name="NoWhitespaceBefore"/>
        <module name="OperatorWrap"/>
        <!-- <module name="ParenPad"/> -->
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround"/>
        <module name="WhitespaceAround">
          <property name="allowEmptyConstructors" value="true"/>
          <property name="allowEmptyMethods" value="true"/>
          <property name="allowEmptyTypes" value="true"/>
          <property name="allowEmptyLoops" value="true"/>
          <message key="ws.notFollowed"
                   value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
          <message key="ws.notPreceded"
                   value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>
        
        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder"/>
        <module name="RedundantModifier"/>

        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="AvoidNestedBlocks"/>

        <module name="EmptyBlock">
            <property name="option" value="text"/>
            <property name="tokens" value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
        </module>

        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected"/>
        </module>

        <module name="LeftCurly">
          <property name="id" value="LeftCurlyNL"/>
          <property name="option" value="nl"/>
          <property name="tokens" value="INTERFACE_DEF,CLASS_DEF,
                                         ENUM_DEF,CTOR_DEF,METHOD_DEF"/>
        </module>
        <module name="LeftCurly">
          <property name="id" value="LeftCurlyNLOW"/>
          <property name="option" value="nlow"/>
          <property name="tokens" value="LITERAL_IF,LITERAL_ELSE"/>
        </module>

        <module name="NeedBraces"/>
        
        <module name="RightCurly">
          <property name="id" value="RightCurlySame"/>
          <property name="tokens" value="LITERAL_DO"/>
        </module>
        <module name="RightCurly">
          <property name="id" value="RightCurlyAOSL"/>
          <property name="option" value="alone_or_singleline"/>
          <property name="tokens" value="LITERAL_TRY, LITERAL_CATCH,                                         
                                         LITERAL_FINALLY, LITERAL_IF,
                                         LITERAL_ELSE, CLASS_DEF,
                                         METHOD_DEF, CTOR_DEF,
                                         LITERAL_FOR, LITERAL_WHILE,
                                         LITERAL_DO, STATIC_INIT,
                                         INSTANCE_INIT, LAMBDA"/>          
        </module>         

        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <module name="AvoidInlineConditionals"/>
        <module name="EmptyStatement"/>
        <module name="EqualsHashCode"/>
        <module name="FallThrough"/>
        <module name="HiddenField"/>
        <module name="IllegalInstantiation"/>
        <module name="IllegalTokenText">
          <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
          <property name="format" value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
          <property name="message" value="Consider using special escape sequence instead of octal value or Unicode escaped value."/>
        </module>
        <module name="InnerAssignment"/>
        <module name="MagicNumber"/>
        <module name="MissingSwitchDefault"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="NoFinalizer"/>
        <module name="OneStatementPerLine"/>
        <module name="OverloadMethodsDeclarationOrder"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="VariableDeclarationUsageDistance"/>
        
        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <module name="DesignForExtension"/>
        <module name="FinalClass"/>
        <module name="HideUtilityClassConstructor"/>
        <module name="InterfaceIsType"/>
        <module name="OneTopLevelClass"/>
        <module name="VisibilityModifier"/>

        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle"/>
        <module name="AvoidEscapedUnicodeCharacters">
          <property name="allowEscapesForControlCharacters" value="true"/>
          <property name="allowByTailComment" value="true"/>
          <property name="allowNonPrintableEscapes" value="true"/>
        </module>
        <module name="CommentsIndentation"/>
        <module name="FinalParameters"/>
        <module name="Indentation"/>
        <module name="TodoComment"/>
        <module name="UpperEll"/>


        <module name="AnnotationLocation">
          <property name="id" value="AnnotationLocationMostCases"/>
          <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
        </module>
        <module name="AnnotationLocation">
          <property name="id" value="AnnotationLocationVariables"/>
          <property name="tokens" value="VARIABLE_DEF"/>
          <property name="allowSamelineMultipleAnnotations" value="true"/>
        </module>
    </module>


  </module>
